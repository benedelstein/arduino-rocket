#include <Wire.h>#include <Adafruit_MMA8451.h>#include <Adafruit_Sensor.h>#include "Adafruit_MCP9808.h"#include <RTClib.h>#include <SD.h>#include <Wire.h>#include <I2C.h>Adafruit_MMA8451 mma = Adafruit_MMA8451();Adafruit_MCP9808 tempsensor = Adafruit_MCP9808();File logfile;RTC_PCF8523 rtc; //initialize RTC clockconst int chipSelect = 10; //for SD#define SYNC_INTERVAL 900 // mills between calls to flush() - to write data to the carduint32_t syncTime = 0; // time of last sync()//for geiger counterchar readBuffer[64];String readString;int commaLocations[6];//for pressure sensorconst int sensor_addr = 0x28;const double pmin = -15.0;const double pmax = 15.0;uint16_t pressure; // 14-bit pressure reading from sensor internal ADCdouble pressurePSI;uint8_t status;uint8_t dataBuf[4];const double airpressure = 14.55;const double R = 53.33;void setup() {  Serial.begin(9600);  Serial1.begin(9600); //geiger serial port  Wire.begin();  I2c.begin();  while (!Serial || !Serial1) {  ; // wait for serial port to connect. Needed for native USB port only  }  if (!tempsensor.begin()) {    //Serial.println("Couldn't find MCP9808!");    //while (1);  }    if (!mma.begin()) {    //Serial.println("Couldnt start accelerometer");    //while (1);  }    mma.setRange(MMA8451_RANGE_8_G);  /*Serial.print("Range = "); Serial.print(2 << mma.getRange());    Serial.println("G");*/    if(!rtc.begin())  {    //Serial.println("RTC failed.");  }    if (!rtc.initialized()) {    //Serial.println("RTC is NOT running!");  }  while (!SD.begin(chipSelect)) {    //Serial.println("Card failed, or not present");    // don't do anything more:  }  logfile = SD.open("datalog.csv", FILE_WRITE);  logfile.println("millis,datetime,tempC,tempF,Xaccel,Yaccel,Zaccel,cps,cpm,usv/hr,pressure,velocity,mach");  //units: seconds, date utc (ahead by 5 hrs), celsius, fahrenheit, m/s^2, m/s^2, m/s^2, cps, cpm, uSv/hr, psi, ft/s, mach    //accelerometer trigger switch  //until acceleration is certain value, do not log data  mma.read();  sensors_event_t event2;  mma.getEvent(&event2);  while(event2.acceleration.x<30 && event2.acceleration.y<30 && event2.acceleration.z<30)  {    Serial.println("wait");    mma.read();    mma.getEvent(&event2);    Serial.println(event2.acceleration.x);    Serial.println(event2.acceleration.y);    Serial.println(event2.acceleration.z);    delay(50);  }  Serial.println("go");}void loop() {  //get time  Serial.println("in");  DateTime now;  uint32_t m = millis();  logfile.print(m);           // milliseconds since start  logfile.print(",");     now = rtc.now();  //logfile.print(now.unixtime()); // seconds since 1/1/1970  //logfile.print(", ");  logfile.print('"');  logfile.print(now.year(), DEC);  logfile.print("/");  logfile.print(now.month(), DEC);  logfile.print("/");  logfile.print(now.day(), DEC);  logfile.print(" ");  logfile.print(now.hour(), DEC);  logfile.print(":");  logfile.print(now.minute(), DEC);  logfile.print(":");  logfile.print(now.second(), DEC);  logfile.print('"');  logfile.print(",");    // Read and print out the temperature, then convert to *F  float c = tempsensor.readTempC();  float f = c * 9.0 / 5.0 + 32;  logfile.print(c);  logfile.print(",");  logfile.print(f);  logfile.print(",");/*  Serial.print("Temp: "); Serial.print(c); Serial.print("*C\t");   Serial.print(f); Serial.println("*F");*/    mma.read();  /* Get a new sensor event */   sensors_event_t event;   mma.getEvent(&event);  /* Display the results (acceleration is measured in m/s^2) *//*  Serial.print("X: \t"); Serial.print(event.acceleration.x); Serial.print("\t");  Serial.print("Y: \t"); Serial.print(event.acceleration.y); Serial.print("\t");  Serial.print("Z: \t"); Serial.print(event.acceleration.z); Serial.print("\t");  Serial.println("m/s^2 ");*/  logfile.print(event.acceleration.x);  logfile.print(",");  logfile.print(event.acceleration.y);  logfile.print(",");  logfile.print(event.acceleration.z);  logfile.print(",");    if (Serial1.available())  {    Serial1.readBytesUntil('\n',readBuffer,64);     readString = readBuffer;    FindCommaLocations();        //counts per second    logfile.print(readString.substring(commaLocations[0] + 1,commaLocations[1]));    logfile.print(",");    // Serial.print("cps: ");    // Serial.print(readString.substring(commaLocations[0] + 1,commaLocations[1]));    // Serial.print(", ");        //counts per minute    logfile.print(readString.substring(commaLocations[2] + 1, commaLocations[3]));    logfile.print(",");    /*Serial.print("cpm: ");    Serial.print(readString.substring(commaLocations[2] + 1, commaLocations[3]));    Serial.print(", ");*/        //uSv/hr    logfile.print(readString.substring(commaLocations[4] + 1, commaLocations[5]));    logfile.print(",");   /* Serial.print("uSv/hr: ");    Serial.print(readString.substring(commaLocations[4] + 1, commaLocations[5]));    Serial.print(", ");*/        //mode    //logfile.print(readString.substring(commaLocations[5] + 1, commaLocations[5] + 3));  }  else   {    // Serial.println("no geiger data");    logfile.print(",,,");  }    uint8_t error = 0;		error |= I2c.read(sensor_addr,4,dataBuf);		if(!error)		{			status = (dataBuf[0] & 0xC0) >> 6; // status is two most MSb of first byte			pressure = (dataBuf[0] & 0x3F) << 8; // pressure MSB less the status bits			pressure += dataBuf[1]; // pressure LSB		}		  pressurePSI= pmin+double((pressure-1638.0)/(14745.0-1638.0)*(pmax-pmin));  // Serial.print(pressurePSI);  // Serial.println(" psi");  logfile.print(pressurePSI);  logfile.print(",");  double airdensity =(airpressure*144.0)/((R*(c+459.69)))*(1/32.174); //slugs/ft^3  double velocity = sqrt(2.0*pressurePSI*144.0/airdensity); //ft/s  // Serial.print("Velocity: ");  // Serial.println(velocity);  logfile.print(velocity);  logfile.print(",");  double soundspeed = 331 +0.6*c;  double soundspeedftpers = soundspeed*3.28084;  double mach = velocity/soundspeedftpers;  // Serial.print("Mach number: ");  // Serial.println(mach);  logfile.print(mach);    //end operations  logfile.println();  // Serial.println();  delay(100);    if ((millis() - syncTime) < SYNC_INTERVAL) return; //if not enough time has passed, end iteration, do not flush()  syncTime = millis();  logfile.flush();}void FindCommaLocations()     //helper function for geiger counter{    commaLocations[0] = readString.indexOf(',');    commaLocations[1] = readString.indexOf(',',commaLocations[0] + 1);    commaLocations[2] = readString.indexOf(',',commaLocations[1] + 1);    commaLocations[3] = readString.indexOf(',',commaLocations[2] + 1);    commaLocations[4] = readString.indexOf(',',commaLocations[3] + 1);    commaLocations[5] = readString.indexOf(',',commaLocations[4] + 1);}